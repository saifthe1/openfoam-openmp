#summary Exempel på hur gprof används
#labels Appendix,Featured

= Orginal =

{{{
#include <stdio.h>

/* Computes the length of Collatz sequences */

unsigned int step (unsigned int x)
{
    if (x % 2 == 0)
    {
        return (x / 2);
    }
    else
    {
        return (3 * x + 1);
    }
}

unsigned int nseq (unsigned int x0)
{
    unsigned int i = 1, x;
  
    if (x0 == 1 || x0 == 0)
      return i;

    x = step (x0);

    while (x != 1 && x != 0)
    {
        x = step (x);
        i++;
    }

    return i;
}

int main (void)
{
    unsigned int i, m = 0, im = 0;

    for (i = 1; i < 500000; i++)
    {
        unsigned int k = nseq (i);

        if (k > m)
        {
            m = k;
            im = i;
            printf ("sequence length = %u for %u\n", m, im);
        }
    }
    return 0;
}
}}}
= Profilering via gprof =
{{{
Flat profile:

Each sample counts as 0.01 seconds.
  %   cumulative   self              self     total           
 time   seconds   seconds    calls  us/call  us/call  name    
 53.60      0.59     0.59   499999     1.19     2.22  nseq
 46.40      1.11     0.52 62135400     0.01     0.01  step
}}}

= Försök till prestandaökning =
== Optimering ==

{{{
unsigned int step (unsigned int x)
{
    if (x % 2 == 0)
    {
        return (x / 2);
    }
    else
    {
        return (3 * x + 1);
    }
}
}}}
Bytes mot
{{{
unsigned int step (unsigned int x)
{
    return x % 2 == 0 ?
              x / 2
            : 3 * x + 1;
}
}}}

== Parallellisering ==

{{{
int main (void)
{
    unsigned int i, m = 0, im = 0;

    for (i = 1; i < 500000; i++)
    {
        unsigned int k = nseq (i);

        if (k > m)
        {
            m = k;
            im = i;
            printf ("sequence length = %u for %u\n", m, im);
        }
    }
    return 0;
}
}}}
Bytes mot
{{{
int main (void)
{
    unsigned int i, m = 0, im = 0;

    #pragma omp parallel for private(i) default(shared)
    for (i = 1; i < 500000; i++)
    {
        unsigned int k = nseq (i);

        #pragma omp critical
        {
            if (k > m)
            {
                m = k;
                im = i;
                printf ("sequence length = %u for %u\n", m, im);
            }
        }
    }
    retu
}}}